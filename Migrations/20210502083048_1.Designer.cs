// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Project.Migrations
{
    [DbContext(typeof(BackendProjectContext))]
    [Migration("20210502083048_1")]
    partial class _1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Cafe", b =>
                {
                    b.Property<Guid>("CafeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StadId")
                        .HasColumnType("int");

                    b.HasKey("CafeId");

                    b.HasIndex("StadId");

                    b.ToTable("Cafes");
                });

            modelBuilder.Entity("Evenementen", b =>
                {
                    b.Property<Guid>("EvenementenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Beschrijving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkEvent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EvenementenId");

                    b.ToTable("Evenementen");
                });

            modelBuilder.Entity("EvenementenStudentenclub", b =>
                {
                    b.Property<Guid>("EvenementenId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StudentenclubId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EvenementenId", "StudentenclubId");

                    b.HasIndex("StudentenclubId");

                    b.ToTable("EvenementenStudentenclub");
                });

            modelBuilder.Entity("Stad", b =>
                {
                    b.Property<int>("StadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provincie")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StadId");

                    b.ToTable("Steden");

                    b.HasData(
                        new
                        {
                            StadId = 1,
                            Naam = "Kortrijk",
                            Provincie = "West-Vlaanderen"
                        },
                        new
                        {
                            StadId = 2,
                            Naam = "Brugge",
                            Provincie = "West-Vlaanderen"
                        });
                });

            modelBuilder.Entity("Student", b =>
                {
                    b.Property<Guid>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeboorteDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId");

                    b.ToTable("Studente");
                });

            modelBuilder.Entity("StudentStudentenclub", b =>
                {
                    b.Property<Guid>("ClubsStudentenclubId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LedenStudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ClubsStudentenclubId", "LedenStudentId");

                    b.HasIndex("LedenStudentId");

                    b.ToTable("StudentStudentenclub");
                });

            modelBuilder.Entity("Studentenclub", b =>
                {
                    b.Property<Guid>("StudentenclubId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Beschrijving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CafeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Oprichtingsjaar")
                        .HasColumnType("int");

                    b.Property<int>("StadId")
                        .HasColumnType("int");

                    b.HasKey("StudentenclubId");

                    b.HasIndex("CafeId");

                    b.ToTable("Studentenclubs");
                });

            modelBuilder.Entity("Cafe", b =>
                {
                    b.HasOne("Stad", "Stad")
                        .WithMany("Cafes")
                        .HasForeignKey("StadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stad");
                });

            modelBuilder.Entity("EvenementenStudentenclub", b =>
                {
                    b.HasOne("Evenementen", null)
                        .WithMany("EvenementenStudentenclub")
                        .HasForeignKey("EvenementenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Studentenclub", "Studentenclub")
                        .WithMany("EvenementenStudentenclub")
                        .HasForeignKey("StudentenclubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Studentenclub");
                });

            modelBuilder.Entity("StudentStudentenclub", b =>
                {
                    b.HasOne("Studentenclub", null)
                        .WithMany()
                        .HasForeignKey("ClubsStudentenclubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Student", null)
                        .WithMany()
                        .HasForeignKey("LedenStudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Studentenclub", b =>
                {
                    b.HasOne("Cafe", null)
                        .WithMany("Studentenclubs")
                        .HasForeignKey("CafeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Cafe", b =>
                {
                    b.Navigation("Studentenclubs");
                });

            modelBuilder.Entity("Evenementen", b =>
                {
                    b.Navigation("EvenementenStudentenclub");
                });

            modelBuilder.Entity("Stad", b =>
                {
                    b.Navigation("Cafes");
                });

            modelBuilder.Entity("Studentenclub", b =>
                {
                    b.Navigation("EvenementenStudentenclub");
                });
#pragma warning restore 612, 618
        }
    }
}
